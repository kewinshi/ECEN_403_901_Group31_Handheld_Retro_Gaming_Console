Kevin's Status Report
_
Things Accomplished:
Finalized the IDE choice and installed it successfully.
We have a general block diagram for the whole project.
-
In Progress:
Starting to familiarize with STM32CubeIDE and programming code in it.
Finalize on microcontroller and compatabile peripheral parts and purchasing them.
-
Setbacks:  
Relative passed away, costing approximately four days of work. 
Had a trouble installing IDE. Website had a loop of account verification and software installations.

Anthony's Report
Things Accomplished:
This week I mainly worked on researching for hardware parts for the console.
I was able to find the microcontroller of choice to be the STM32 NUCLEO-F103RB and will use STM32Cub as my IDE to embed code into the microcontroller.
-
In progress/goals for next week:
In this coming week I will start writing pseudocode to operate the power system of the pcb
I have also decided that the sound system of the console will be a piezo buzzer and the controls will be digital buttons that will connect to the GPIO of the NUCLEO microcontroller
The power supply will be a plug in the wall and the the regulator will be a LDO that will convert the voltage down to 3V. I will work on current regulation this week.
My main plan this week is to start buying parts and start figuring out which AC/DC converter, LDO, and buttons that we will be using as well as create the logic of coding the microcontroller and PCB design.
I will also finish a very general flow chart of the hardware. 
-
Setbacks: 
Wifi at my apartment went out for 4 days

Kyle's Report
I had determined to use the display system, NHD-7.0-800480FT-CTXL-T
I made more research into NHD-7.0-800480FT-CTXL-T and I had deciede to use C++ for the programming of the display system.
I began reasaerching into the graphics controller, FT800, the graphics
- FT800 communicates with your microcontroller through SPI or I2C
- example of intialization process:
class FT800Controller {
public:
    void initialize() {
        sendCommand(FT800_ACTIVE);  // Wake up the FT800
        delay(20);  // Wait for power up

        // Set display parameters
        sendCommand(FT800_CLEAR_COLOR_RGB(0, 0, 0));  // Set black background
        sendCommand(FT800_CLEAR(1, 1, 1));  // Clear color, stencil, and tag buffers
        sendCommand(FT800_DISPLAY());  // Enable display
    }

    void sendCommand(uint32_t command) {
        // Implement SPI or I2C communication to send commands to FT800
        SPI_Transfer(command);
    }

    void delay(int ms) {
        // Implement a delay function to wait for FT800 to initialize
        std::this_thread::sleep_for(std::chrono::milliseconds(ms));
    }
};

Currently:
purchasing graphics controller and display system.
learning how to code a graphics controller(ft800)
